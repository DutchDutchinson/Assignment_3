insstall.packages("devtools")
install.packages("devtools")
library(devtools)
library (devtools)
install.packages ("devtools")
library (devtools)
install.packages ("devtools")
"devtools"
library (devtools)
find_rtools()
add2 <- function(x, y) {x+y}
add2 (3,5)
above10 <- function (x) {
use <- x>10
x[use]
}
above <- function (x,n) {
use <- x>n
x[use]
}
above (5,10)
above (5,4)
above (x, 12)
add2 <- function(x, y) {x+y}
above10 <- function (x) {
coumnmean <-function (y) {
nc <- ncol(y)
means <- numeric(nc)
for (i in 1:nc){
means[i] <-mean(y[,i])
}
means
}
View(add2)
coumnmean <-function (y) {
nc <- ncol(y)
means <- numeric(nc)
for (i in 1:nc){
means[i] <-mean(y[,i])
}
means
}
coumnmean <-function (y) {
nc <- ncol(y)
means <- numeric(nc)
for (i in 1:nc){
means[i] <-mean(y[,i]}
}
means
}
coumnmean <-function (y) {
nc <- ncol(y)
means <- numeric(nc)
for (i in 1:nc){
means[i] <-mean(y[,i])
}
means
}
x <- 1:10
if (x>5) {
x <-0
}
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <-10
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
y
install.packages(swirl)
install.packages("swirl")
library(swirl)
swirl()
5+7
x <-5+7
x
y <- x
y <- x-3
y
bye()
swirl()
z <- c(1.1, 9, 3.14)
?c()
?c
z
(z, 555, z)
c(Z, 555, Z)
C(Z,555,Z)
Z
Z<- C(1.1,9,3.14)
BYE()
swirl()
swirl(0)
swirl()
?swirl
install.packages("swirl")
library(swirl)
swirl()
skip()
skip()
skip()
skip()
skip()
z <- c(1.1,9,3.14)
?c
z
c(z,555,z)
z*2+100
my_sqrt <-sqrt(z-1)
my_sqrt
my_div <- z/my_sqrt
my_div
c(1, 2, 3, 4)+c(0,10)
c(1,2,3,4)+c(0,10,100)
c(1,2,3,4)+c(0,10,1000)
z*2+1000
my_div
getwd(0)
getwd()
ls()
x< - 9
x <- 9
ls()
list.files()
?list.files
args(list.files())
args(list.files)
old.dir <-list.files
old.dir <- getwd()
dir.create(test.dir)
dir.create(testdir)
bye()
swirl()
testdir <-dir.create()
dir.create(testdir)
help()
skip()
setwed("testdir")
setwd("testdir")
file.create("mytest.r")
file.create("my.test.R")
file.create("mytest.R")
lswd()
list.wd()
ls()
list.files()
file.exists("mytest.R")
file.inf("mytest.R")
file.info("Mytest.R")
file.info("mytest.R")
file.rename("mytest.R,mytest2.R")
file.rename ("from mytest.R, to mytest2.R")
file.rename("mytest.R", "mytest2.R")
file.copy("mytest2.R", "mytest3.R")
file.path()
file.paht("mytest3.R")
file.path("mytest3.R")
file.path ("folder1")
file.path("folder1", "folder2")
?dir.create
file.path(dir.create("testdir.2","testdir3""))
go
skip()
file.path(dir.create("testdir.2","testdir3"")
skip()
delete.dir("test.dir2", recursive=true)
skip()
setwd(old.dir)
unlink("testdir")
unlin"testdir", recursive = TRUE)
unlink("testdir", recursive = TRUE)
ollutantmean <- function(directory, pollutant, id = 1:332) {
setwd(file.path(getwd(), directory)) ## setting the directory
total = 0                            ## the sum of all observed values of pollutant (either sulfate or nitrate)
observations = 0                     ## the total number of observed values of pollutant (either sulfate or nitrate)
#Looping thru the directory's files specified in the 'id' argument
for (i in id)
{
## Due to the format of the filename, i.e 001, 010  instead of 1, 10. I became aware that the following method works but not efficient,
## but at the time of the completion of this assignment, it was the only way I knew how to do it.
if (i <10) {
data <- read.csv(paste("0","0", as.character(i), ".csv", sep=""),  ## for example, if 'id' =7, we get 007.csv
header = T,
na.strings=c("NA","NaN", " "))
}
else if (i>=10 & i<100) {
data <- read.csv(paste("0", as.character(i), ".csv", sep=""),  ## for example, if 'id' = 17, we get 017.csv
header = T,
na.strings=c("NA","NaN", " ")
)
}
else       {
data <- read.csv(paste(as.character(i), ".csv", sep=""),     ## Normal
header = T,
na.strings=c("NA","NaN", " ")
)
}
## getting rid of all the "NA" values and, consequently, all the non-complete ovservations (the ones with at least one NA in row)
data = na.omit(data)
##  cumulative addition of the complete observations
observations = observations + nrow(data)
## depending the poluttant ( sulfate or nitrate), we aggregate the observed values
if (pollutant == "sulfate") {total = total + sum(data$sulfate)}
else {total = total + sum(data$nitrate)}
}
## reset directory path
setwd("..")
## returning the mean of the pollutant values
return (total/observations)
}
pollutantmean <- function(directory, pollutant, id = 1:332) {
setwd(file.path(getwd(), directory)) ## setting the directory
total = 0                            ## the sum of all observed values of pollutant (either sulfate or nitrate)
observations = 0                     ## the total number of observed values of pollutant (either sulfate or nitrate)
#Looping thru the directory's files specified in the 'id' argument
for (i in id)
{
## Due to the format of the filename, i.e 001, 010  instead of 1, 10. I became aware that the following method works but not efficient,
## but at the time of the completion of this assignment, it was the only way I knew how to do it.
if (i <10) {
data <- read.csv(paste("0","0", as.character(i), ".csv", sep=""),  ## for example, if 'id' =7, we get 007.csv
header = T,
na.strings=c("NA","NaN", " "))
}
else if (i>=10 & i<100) {
data <- read.csv(paste("0", as.character(i), ".csv", sep=""),  ## for example, if 'id' = 17, we get 017.csv
header = T,
na.strings=c("NA","NaN", " ")
)
}
else       {
data <- read.csv(paste(as.character(i), ".csv", sep=""),     ## Normal
header = T,
na.strings=c("NA","NaN", " ")
)
}
## getting rid of all the "NA" values and, consequently, all the non-complete ovservations (the ones with at least one NA in row)
data = na.omit(data)
##  cumulative addition of the complete observations
observations = observations + nrow(data)
## depending the poluttant ( sulfate or nitrate), we aggregate the observed values
if (pollutant == "sulfate") {total = total + sum(data$sulfate)}
else {total = total + sum(data$nitrate)}
}
## reset directory path
setwd("..")
## returning the mean of the pollutant values
return (total/observations)
}
pollutantmean("specdata", "sulfate", 1:10)
}
pollutantmean("specdata", "sulfate", 1:10)
setwd()
file.path("coursera"")
print
debug(ls)
ls()
library(datasets)
data(mtcars)
library()
library(datasets)
data(mtcars)
best <- function (state,outcome){
allData <- read.csv("outcome-of-care-measures.csv")
stateData <- data.frame()
stateData <- stateData <- allData[allData$State =="state"]
dataOutcome <- if(outcome =="heart attack") {11}
dataOutcome <- if(outcome =="heart failure") {17}
dataOutcome <- if(outcome == "pneumonia") {27}
dataLength <- length(stateData)
bestHospital <- data.frame()
testVar <- 99999999999999
for (i in dataLength){
if(stateData[i,dataOutcome]<testVar){
testVar <- stateData[i,dataOutcome]
bestHospital <- stateData[i,]}
}
bestHospital[,2]
}
best("TX", "heart failure")
setwd("~/Coursera/R Programming/Programming Assignment 3/rprog-data-ProgAssignment3-data")
best <- function (state,outcome){
allData <- read.csv("outcome-of-care-measures.csv")
stateData <- data.frame()
stateData <- stateData <- allData[allData$State =="state"]
dataOutcome <- if(outcome =="heart attack") {11}
dataOutcome <- if(outcome =="heart failure") {17}
dataOutcome <- if(outcome == "pneumonia") {27}
dataLength <- length(stateData)
bestHospital <- data.frame()
testVar <- 99999999999999
for (i in dataLength){
if(stateData[i,dataOutcome]<testVar){
testVar <- stateData[i,dataOutcome]
bestHospital <- stateData[i,]}
}
bestHospital[,2]
}
best("TX","heart failure")
